<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_bo</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>21</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*-------------------------------------
        Initialize Variables
--------------------------------------*/
scr_getInput()
canbounce = 0;
bo_delay = 0;
bo_delay_max = 17;

/*------------------
        States                  
------------------*/
enum aState
{
    normal,
    bounce,
    attack,
}

state = pState.normal
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*---------------------------
           Control                           
---------------------------*/
if (hascontrol)
{
    scr_getInput();
}
else
{
    scr_no_input();
}

/*--------------------------
         Variables                     
--------------------------*/
scr_Globals();
bo_bounce = 0
bo_power = 2;
var bo_angle = image_angle

/*--------------------------
        Image Control                     
--------------------------*/
direction = point_direction(x, y, mouse_x, mouse_y)
image_angle = direction;
if (object_player.image_xscale &lt;= 0)
{
    x = object_player.x - 6;
    y = object_player.y + 6;
}

if (object_player.image_xscale &gt;= 0)
{
    x = object_player.x + 6;
    y = object_player.y + 6;
}

/*------------------
        States                  
------------------*/
switch (state)
{
    case aState.normal:
    {
        if (place_meeting(x, y, object_wall))
        {
            state = aState.bounce;
        }
        if (key_attack)
        {
            state = aState.attack;
        }

    }
    break;

    case aState.bounce:
    {
        airtime = 1;
    
        if (place_meeting(x, y, object_wall)) &amp;&amp; (left_click)
        {
            audio_play_sound(Hit, 11, false)
            bo_delay = bo_delay_max
            repeat(5)
            with(instance_create(x, y, object_brownSpark))
            {
                depth = -100;
            }
    
    
            with(object_player)
            {
                scr_movement();
                var bo_angle = image_angle
                bo_bounce = 9
                direction = point_direction(x, y, mouse_x, mouse_y)
                grounded = false;
    
                vsp = -lengthdir_y(bo_bounce, direction);
                hsp = -lengthdir_x(bo_bounce, direction);
    
                state = aState.normal
    
                hsp_frac = 0
                vsp_frac = 0
    
            }
            if (!place_meeting(x, y, object_wall)) &amp;&amp; (left_click)
            {
                state = aState.normal
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="object_parenthitable">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*------------------------------
          Collisions
-------------------------------- 
       Wall, Crates, Etc.
------------------------------*/
if (left_click)
{
    with(other)
    {
        hp--;
        flash = 3;
    }

    with(object_newCamera)
    {
        shake = 5;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
