<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>object_characters</parentName>
  <maskName>sprite_player</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*----------------------------------
        Initialize Variables        
----------------------------------*/

/*----------------------
        Movement            
----------------------*/
key_down = 0

hsp = 0;
vsp = 0;

walkSpeedBonus = 2
walkSpeed = 2;
walkAcceleration = 0.2;

hsp_fric_ground = 0.2;
hsp_fric_air = 0;

jumpspeed = 5;
grv = 0.2;
jumps = 0;
jumpsmax = 2;

hsp_frac = 0.0;
vsp_frac = 0.0;

/*-------------------------------
        Transition Control                              
-------------------------------*/
globalvar hascontrol;
global.hascontrol = true

/*-------------------------------
        Game Completion                                   
-------------------------------*/
globalvar finishedGame;
global.finishedGame = false

/*--------------------------
        Hit Detection             
--------------------------*/
flash = 0;
hitbyMage = 0
hitbyKnight = 0

/*---------------------------
        Fall Detection                   
---------------------------*/
abyssFall = false

/*------------------
        States                        
------------------*/
state = pState.normal
enum pState
{
    normal,
}





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*---------------------------------------
        Update Respawn Position                     
---------------------------------------*/
if(grounded)
{
    last_x = object_player.xprevious
    last_y = object_player.yprevious -5
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*-----------------------
        Get Input                        
-----------------------*/
if (hascontrol)
{
    scr_getInput();
}
else
{
    scr_no_input();
}



/*------------------
        States                        
------------------*/
switch (state)
{
    /*--------------------
            Normal                              
    --------------------*/
    case pState.normal:
    {
        /*----------------------
                Movement            
        ----------------------*/
        scr_movement();
        scr_animation();
    }
    break;
}

/*-----------------------
        Collision                   
-----------------------*/
scr_collision();

/*-----------------------
        Parallax                   
-----------------------*/
background_x[0] = view_xview / 1.1;
background_x[1] = view_xview / 1.25;
background_x[2] = view_xview / 1.3;
background_x[3] = view_xview / 1.5;
background_x[4] = view_xview / 1.7;
background_x[5] = view_xview / 1.9;
background_x[6] = view_xview / 2;

/*-----------------------
        Health                   
-----------------------*/
if (pHealth &gt;= pHealthMax)
{
    pHealth = pHealthMax;
}

/*-------------------------
        Fall Damage                        
-------------------------*/
if (y&gt;room_height+40){

        if (pHealth &gt; 0)
        { 
            abyssFall = 1;
        }
 
}

if (abyssFall) 
{
   if (pHealth &gt; 0)
   {
       pHealth -= 1;
       abyssFall = false
       if (object_exists(object_shurikenInHand))
        {
            with(object_shurikenInHand)
            {
                instance_destroy();
            }
        }
        if (object_exists(object_bo))
        {
            with(object_bo)
            {
                instance_destroy();
            }
        }
        instance_create(x,y,object_playerDead)
        instance_destroy();
    }
}



/*------------------
        Death                          
------------------*/
if (pHealth &lt;= 0) 
{
    dead = true
    if (object_exists(object_shurikenInHand))
    {
        with(object_shurikenInHand)
        {
            instance_destroy();
        }
    }
    if (object_exists(object_bo))
    {
        with(object_bo)
        {
            instance_destroy();
        }
    }
    SlideTrans(trans_mode.goto,GameOverScreen)
    pHealth = pHealthMax
}

/*-------------------------
        Hit Damage                        
-------------------------*/
if (hitbyMage == 1)
{
    with (object_mageHitbox)
    {
        instance_destroy();
    }
    repeat(5)
    with(instance_create(x, y, object_blood))
    {
        depth = -100;
    }
    pHealth -= 3
    hitbyMage = 0
    audio_play_sound(Hit,1000,false);
}

if (hitbyKnight == 1)
{
    with (object_mageHitbox)
    {
        instance_destroy();
    }
    repeat(5)
    with(instance_create(x, y, object_blood))
    {
        depth = -100;
    }
    pHealth -= 5
    hitbyKnight = 0
    audio_play_sound(Hit,1000,false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*----------------------------
        Footsteps Sound                                        
----------------------------*/
if (sprite_index == sprite_playerRun)
{
    audio_play_sound(choose(Footstep1,Footstep2,Footstep3,Footstep4),1000000,false)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*---------------------------
        Death Sequence                                   
---------------------------*/
if dead
{
    if (file_exists(SAVEFILE))
    {
        file_delete(SAVEFILE);
    }

    var file;
    file = file_text_open_write(SAVEFILE);
    file_text_write_real(file, Level_1)
    file_text_close(file);
    dead = false
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*------------------------
        Autosave                        
------------------------*/

/*---------------------------
        Overwrite Save                              
---------------------------*/
if (file_exists(SAVEFILE))
{
    file_delete(SAVEFILE);
}

/*---------------------------
        Create New Save                                   
---------------------------*/
var file;
file = file_text_open_write(SAVEFILE);
file_text_write_real(file, room);
file_text_close(file);

if pHealth == 0
{
    if (file_exists(SAVEFILE))
    {
        file_delete(SAVEFILE);
    }

    var file;
    file = file_text_open_write(SAVEFILE);
    file_text_write_real(file, 5)
    file_text_close(file);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*---------------------------
        Flash Shader                           
---------------------------*/
draw_self();
if (flash &gt; 0)
{
    flash--;
    shader_set(shader_white);
    draw_self();
    shader_reset();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
